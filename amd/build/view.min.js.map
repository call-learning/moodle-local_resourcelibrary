{"version":3,"file":"view.min.js","sources":["../src/view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the courses or course modules view for the Resource Library.\n *\n * Inspired from the Course overview block.\n * @copyright  2020 CALL Learning 2020 - Laurent David laurent@call-learning.fr\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    [\n        'jquery',\n        'local_resourcelibrary/repository',\n        'core/paged_content_factory',\n        'core/pubsub',\n        'core/custom_interaction_events',\n        'core/notification',\n        'core/templates',\n        'core_course/events',\n        'local_resourcelibrary/selectors',\n        'core/paged_content_events',\n    ],\n    function(\n        $,\n        Repository,\n        PagedContentFactory,\n        PubSub,\n        CustomEvents,\n        Notification,\n        Templates,\n        CourseEvents,\n        Selectors,\n        PagedContentEvents\n    ) {\n\n        var TEMPLATES = {\n            ENTITES_CARDS: 'local_resourcelibrary/view-cards',\n            ENTITIES_LIST: 'local_resourcelibrary/view-list',\n            NOENTITIES: 'local_resourcelibrary/no-entities'\n        };\n\n        var NUMCOURSES_PERPAGE = [12, 24, 48];\n\n        var loadedPages = [];\n\n        var lastPage = 0;\n\n        var lastLimit = 0;\n\n        var namespace = null;\n\n        var currentFilters = [];\n\n        var entityType = 'course';\n\n        var courseId = 0;\n\n        var categoryId = 0;\n\n        /**\n         * Get display modifier values from DOM.\n         * This will either change the sorting order, the way we display the cards or list\n         * and if we display categories or sections\n         * @param {object} root The root element for the entities view.\n         * @return {object} display modifier Set.\n         */\n        var getDisplayModifierValues = function(root) {\n            var entityRegion = root.find(Selectors.entityView.region);\n            return {\n                display: entityRegion.attr('data-display'),\n                sort: {column: entityRegion.attr('data-sort-column'), order: entityRegion.attr('data-sort-order')},\n                displaycategories: entityRegion.attr('data-displaycategories'),\n            };\n        };\n\n        // We want the paged content controls below the paged content area.\n        // and the controls should be ignored while data is loading.\n        var DEFAULT_PAGED_CONTENT_CONFIG = {\n            ignoreControlWhileLoading: true,\n            controlPlacementBottom: true,\n            persistentLimitKey: 'local_resourcelibrary_user_paging_preference'\n        };\n\n        /**\n         * Get enrolled entities from backend.\n         * @param {object} modifiers The display modifier for this view.\n         * @param {object} filters The filters for this view.\n         * @param {int} limit The number of entities to show.\n         * @param {int} offset to start with The number of entities to show.\n         * @return {promise} Resolved with an array of entities.\n         */\n        var getEntities = function(modifiers, filters, limit, offset) {\n            if (entityType === 'course') {\n                return Repository.getFilteredCourseList({\n                    categoryid: categoryId,\n                    sorting: [{column: modifiers.sort.column, order: modifiers.sort.order}],\n                    filters: filters,\n                    limit: limit,\n                    offset: offset\n                });\n            }\n            return Promise.resolve([]);\n        };\n\n        /**\n         * Get the paged content container element.\n         *\n         * @param  {Object} root The entity overview container\n         * @param  {Number} index Rendered page index.\n         * @return {Object} The rendered paged container.\n         */\n        var getPagedContentContainer = function(root, index) {\n            return root.find('[data-region=\"paged-content-page\"][data-page=\"' + index + '\"]');\n        };\n\n        /**\n         * Render the dashboard entities.\n         *\n         * @param {object} root The root element for the entities view.\n         * @param {array} pageData containing the page data as setup in LoadPage\n         * @return {promise} jQuery promise resolved after rendering is complete.\n         */\n        var renderEntities = function(root, pageData) {\n\n            var entities = [];\n            if (pageData.entities !== undefined) {\n                entities = pageData.entities;\n            }\n            var filters = getDisplayModifierValues(root);\n\n            var currentTemplate = '';\n            if (filters.display === 'list') {\n                currentTemplate = TEMPLATES.ENTITIES_LIST;\n            } else {\n                currentTemplate = TEMPLATES.ENTITES_CARDS;\n            }\n\n            // Delete the entity category if it is not to be displayed.\n            if (filters.displaycategories !== 'on') {\n                entities = entities.map(function(entity) {\n                    delete entity.category;\n                    return entity;\n                });\n            }\n\n            if (entities.length) {\n                return Templates.render(currentTemplate, {\n                    entities: entities,\n                });\n            } else {\n                var noentitiesimg = root.find(Selectors.entityView.region).attr('data-noentitiesimg');\n                return Templates.render(TEMPLATES.NOENTITIES, {\n                    noentitiesimg: noentitiesimg\n                });\n            }\n        };\n\n        /**\n         * Return the callback to be passed to the subscribe event\n         *\n         * @param {Number} limit The paged limit that is passed through the event\n         */\n        var setLimit = function(limit) {\n            this.find(Selectors.entityView.region).attr('data-paging', limit);\n        };\n\n        /**\n         * Intialise the paged list and cards views on page load.\n         * Returns an array of paged contents that we would like to handle here\n         *\n         * @param {object} root The root element for the entities view\n         * @param {string} namespace The namespace for all the events attached\n         */\n        var registerPagedEventHandlers = function(root, namespace) {\n            var event = namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT;\n            PubSub.subscribe(event, setLimit.bind(root));\n        };\n\n        /**\n         * Get the maximum item per page\n         * @param {DomNode} rootNode\n         * @returns {array} of items per page\n         */\n        var getItemPerPage = function(rootNode) {\n            var itemsPerPage = NUMCOURSES_PERPAGE;\n            var pagingLimit = parseInt(rootNode.find(Selectors.entityView.region).attr('data-paging'), 10);\n            if (pagingLimit) {\n                itemsPerPage = NUMCOURSES_PERPAGE.map(function(value) {\n                    var active = false;\n                    if (value === pagingLimit) {\n                        active = true;\n                    }\n\n                    return {\n                        value: value,\n                        active: active\n                    };\n                });\n            }\n            return itemsPerPage;\n        };\n\n        /**\n         * Intialise the entities list and cards views on page load.\n         *\n         * @param {object} root The root element for the entities view.\n         */\n        var initializePagedContent = function(root) {\n            namespace = \"local_resourcelibrary\" + root.attr('id') + \"_\" + Math.random();\n\n            var itemsPerPage = getItemPerPage(root);\n\n\n            var modifiers = getDisplayModifierValues(root);\n            var config = $.extend({}, DEFAULT_PAGED_CONTENT_CONFIG);\n            config.eventNamespace = namespace;\n\n            var pagedContentPromise = PagedContentFactory.createWithLimit(\n                itemsPerPage,\n                function(pagesData, actions) {\n                    var promises = [];\n\n                    pagesData.forEach(function(pageData) {\n                        var currentPage = pageData.pageNumber;\n                        var limit = pageData.limit;\n\n                        // Reset local variables if limits have changed.\n                        if (lastLimit !== limit) {\n                            loadedPages = [];\n                            lastPage = 0;\n                        }\n\n                        if (lastPage === currentPage) {\n                            // If we are on the last page and have it's data then load it from cache.\n                            actions.allItemsLoaded(lastPage);\n                            promises.push(renderEntities(root, loadedPages[currentPage]));\n                            return;\n                        }\n                        lastLimit = limit;\n                        var additionalValues = {};\n                        if (entityType !== 'course') {\n                            additionalValues = courseId;\n                        }\n                        var pagePromise = getEntities(\n                            modifiers,\n                            currentFilters,\n                            limit,\n                            limit * (currentPage - 1),\n                            additionalValues\n                        ).then(function(entities) {\n                            // Finished setting up the current page.\n                            loadedPages[currentPage] = {\n                                entities: entities\n                            };\n                            // Set the last page to either the current or next page.\n                            if (loadedPages[currentPage].entities.length < pageData.limit) {\n                                lastPage = currentPage;\n                                actions.allItemsLoaded(currentPage);\n                            }\n                            return renderEntities(root, loadedPages[currentPage]);\n                        }).catch(Notification.exception);\n\n                        promises.push(pagePromise);\n                    });\n\n                    return promises;\n                },\n                config\n            );\n\n            pagedContentPromise.then(function(html, js) {\n                registerPagedEventHandlers(root, namespace);\n                return Templates.replaceNodeContents(root.find(Selectors.entityView.region), html, js);\n            }).done(\n                () => {\n                    const rootNode = document.querySelector(Selectors.entityView.region\n                        + ' .paged-content-page-container');\n                    const waitForNodeReplacement = (mutationsList) => {\n                        if (mutationsList) {\n                            mutationsList.forEach(\n                                (mutation) => {\n                                    if (mutation.type === 'childList') {\n                                        const event = new CustomEvent('resource_library_card_rendered', {\n                                            'rootNode': rootNode\n                                        });\n                                        const haspagecontent = document.querySelector(Selectors.entityView.region\n                                            + ' .paged-content-page-container [data-region=\"paged-content-page\"]');\n                                        if (haspagecontent) {\n                                            document.dispatchEvent(event);\n                                        }\n                                    }\n                                }\n                            );\n                        }\n                    };\n                    const observer = new MutationObserver(waitForNodeReplacement);\n                    const config = {childList: true, subtree: true};\n                    observer.observe(rootNode, config);\n                    return true;\n                })\n                .catch(Notification.exception);\n        };\n\n        /**\n         * Listen to, and handle events for the Resource Library page.\n         *\n         * @param {Object} root resourcelibrary page\n         */\n        var registerEventListeners = function(root) {\n            CustomEvents.define(root, [\n                CustomEvents.events.activate\n            ]);\n        };\n\n        /**\n         * Intialise the entities list and cards views on page load.\n         *\n         * @param {object} root The root element for the entities view.\n         */\n        var refresh = function(root) {\n            root = $(root);\n            loadedPages = [];\n            lastPage = 0;\n            initializePagedContent(root);\n            entityType = root.attr('data-entity-type');\n            courseId = parseInt(root.attr('data-parent-id'));\n            categoryId = parseInt(root.attr('data-category-id'));\n            if (!root.attr('data-init')) {\n                registerEventListeners(root);\n                root.attr('data-init', true);\n            }\n        };\n        var init = function(root) {\n            // Only init the view when filters are initialised.\n            // Reset the views when we receive a change in filters.\n            $(document).on('resourcelibrary-filters-inited resourcelibrary-filters-change',\n                function(e, formdata) {\n                    currentFilters = formdata;\n                    this.refresh(root);\n                }.bind(this)\n            );\n        };\n\n\n        /**\n         * Reset the entities views to their original\n         * state on first page load.entityOffset\n         *\n         * This is called when configuration has changed for the event lists\n         * to cause them to reload their data.\n         *\n         * @param {Object} root The root element for the timeline view.\n         */\n        var reset = function(root) {\n            if (loadedPages.length > 0) {\n                loadedPages.forEach(function(entityList, index) {\n                    var pagedContentPage = getPagedContentContainer(root, index);\n                    renderEntities(root, entityList).then(function(html, js) {\n                        return Templates.replaceNodeContents(pagedContentPage, html, js);\n                    }).catch(Notification.exception);\n                });\n            } else {\n                refresh(root);\n            }\n        };\n\n        return {\n            init: init,\n            reset: reset,\n            refresh: refresh,\n        };\n    });\n"],"names":["define","$","Repository","PagedContentFactory","PubSub","CustomEvents","Notification","Templates","CourseEvents","Selectors","PagedContentEvents","TEMPLATES","NUMCOURSES_PERPAGE","loadedPages","lastPage","lastLimit","namespace","currentFilters","entityType","categoryId","getDisplayModifierValues","root","entityRegion","find","entityView","region","display","attr","sort","column","order","displaycategories","DEFAULT_PAGED_CONTENT_CONFIG","ignoreControlWhileLoading","controlPlacementBottom","persistentLimitKey","renderEntities","pageData","entities","undefined","filters","currentTemplate","map","entity","category","length","render","noentitiesimg","setLimit","limit","this","registerPagedEventHandlers","event","SET_ITEMS_PER_PAGE_LIMIT","subscribe","bind","initializePagedContent","Math","random","itemsPerPage","rootNode","pagingLimit","parseInt","value","active","getItemPerPage","modifiers","config","extend","eventNamespace","pagedContentPromise","createWithLimit","pagesData","actions","promises","forEach","currentPage","pageNumber","allItemsLoaded","push","pagePromise","offset","getFilteredCourseList","categoryid","sorting","Promise","resolve","getEntities","then","catch","exception","html","js","replaceNodeContents","done","document","querySelector","MutationObserver","mutationsList","mutation","type","CustomEvent","dispatchEvent","observe","childList","subtree","refresh","events","activate","registerEventListeners","init","on","e","formdata","reset","entityList","index","pagedContentPage","getPagedContentContainer"],"mappings":";;;;;;;AAuBAA,oCACI,CACI,SACA,mCACA,6BACA,cACA,iCACA,oBACA,iBACA,qBACA,kCACA,8BAEJ,SACIC,EACAC,WACAC,oBACAC,OACAC,aACAC,aACAC,UACAC,aACAC,UACAC,oBAGA,IAAIC,wBACe,mCADfA,wBAEe,kCAFfA,qBAGY,oCAGZC,mBAAqB,CAAC,GAAI,GAAI,IAE9BC,YAAc,GAEdC,SAAW,EAEXC,UAAY,EAEZC,UAAY,KAEZC,eAAiB,GAEjBC,WAAa,SAIbC,WAAa,EASbC,yBAA2B,SAASC,MACpC,IAAIC,aAAeD,KAAKE,KAAKd,UAAUe,WAAWC,QAClD,MAAO,CACHC,QAASJ,aAAaK,KAAK,gBAC3BC,KAAM,CAACC,OAAQP,aAAaK,KAAK,oBAAqBG,MAAOR,aAAaK,KAAK,oBAC/EI,kBAAmBT,aAAaK,KAAK,4BAMzCK,6BAA+B,CAC/BC,2BAA2B,EAC3BC,wBAAwB,EACxBC,mBAAoB,gDA0CpBC,eAAiB,SAASf,KAAMgB,UAEhC,IAAIC,SAAW,QACWC,IAAtBF,SAASC,WACTA,SAAWD,SAASC,UAExB,IAAIE,QAAUpB,yBAAyBC,MAEnCoB,gBAAkB,GAetB,GAbIA,gBADoB,SAApBD,QAAQd,QACUf,wBAEAA,wBAIY,OAA9B6B,QAAQT,oBACRO,SAAWA,SAASI,KAAI,SAASC,QAE7B,cADOA,OAAOC,SACPD,MACX,KAGAL,SAASO,OACT,OAAOtC,UAAUuC,OAAOL,gBAAiB,CACrCH,SAAUA,WAGd,IAAIS,cAAgB1B,KAAKE,KAAKd,UAAUe,WAAWC,QAAQE,KAAK,sBAChE,OAAOpB,UAAUuC,OAAOnC,qBAAsB,CAC1CoC,cAAeA,iBAUvBC,SAAW,SAASC,OACpBC,KAAK3B,KAAKd,UAAUe,WAAWC,QAAQE,KAAK,cAAesB,QAU3DE,2BAA6B,SAAS9B,KAAML,WAC5C,IAAIoC,MAAQpC,UAAYN,mBAAmB2C,yBAC3CjD,OAAOkD,UAAUF,MAAOJ,SAASO,KAAKlC,QAgCtCmC,uBAAyB,SAASnC,MAClCL,UAAY,wBAA0BK,KAAKM,KAAK,MAAQ,IAAM8B,KAAKC,SAEnE,IAAIC,aA3Ba,SAASC,UAC1B,IAAID,aAAe/C,mBACfiD,YAAcC,SAASF,SAASrC,KAAKd,UAAUe,WAAWC,QAAQE,KAAK,eAAgB,IAc3F,OAbIkC,cACAF,aAAe/C,mBAAmB8B,KAAI,SAASqB,OAC3C,IAAIC,QAAS,EAKb,OAJID,QAAUF,cACVG,QAAS,GAGN,CACHD,MAAOA,MACPC,OAAQA,OAEhB,KAEGL,aAWYM,CAAe5C,MAG9B6C,UAAY9C,yBAAyBC,MACrC8C,OAASlE,EAAEmE,OAAO,CAAE,EAAEpC,8BAC1BmC,OAAOE,eAAiBrD,UAExB,IAAIsD,oBAAsBnE,oBAAoBoE,gBAC1CZ,cACA,SAASa,UAAWC,SAChB,IAAIC,SAAW,GA6Cf,OA3CAF,UAAUG,SAAQ,SAAStC,UACvB,IAAIuC,YAAcvC,SAASwC,WACvB5B,MAAQZ,SAASY,MAQrB,GALIlC,YAAckC,QACdpC,YAAc,GACdC,SAAW,GAGXA,WAAa8D,YAIb,OAFAH,QAAQK,eAAehE,eACvB4D,SAASK,KAAK3C,eAAef,KAAMR,YAAY+D,eAGnD7D,UAAYkC,MAKZ,IAAI+B,YAxJF,SAASd,UAAW1B,QAASS,MAAOgC,QAClD,MAAmB,WAAf/D,WACOhB,WAAWgF,sBAAsB,CACpCC,WAAYhE,WACZiE,QAAS,CAAC,CAACvD,OAAQqC,UAAUtC,KAAKC,OAAQC,MAAOoC,UAAUtC,KAAKE,QAChEU,QAASA,QACTS,MAAOA,MACPgC,OAAQA,SAGTI,QAAQC,QAAQ,IA8IOC,CACdrB,UACAjD,eACAgC,MACAA,OAAS2B,YAAc,IAEzBY,MAAK,SAASlD,UAUZ,OARAzB,YAAY+D,aAAe,CACvBtC,SAAUA,UAGVzB,YAAY+D,aAAatC,SAASO,OAASR,SAASY,QACpDnC,SAAW8D,YACXH,QAAQK,eAAeF,cAEpBxC,eAAef,KAAMR,YAAY+D,aAC3C,IAAEa,MAAMnF,aAAaoF,WAEtBhB,SAASK,KAAKC,YAClB,IAEON,QACV,GACDP,QAGJG,oBAAoBkB,MAAK,SAASG,KAAMC,IAEpC,OADAzC,2BAA2B9B,KAAML,WAC1BT,UAAUsF,oBAAoBxE,KAAKE,KAAKd,UAAUe,WAAWC,QAASkE,KAAMC,GACvF,IAAGE,MACC,KACI,MAAMlC,SAAWmC,SAASC,cAAcvF,UAAUe,WAAWC,OACvD,kCAsBN,OAHiB,IAAIwE,kBAlBWC,gBACxBA,eACAA,cAAcvB,SACTwB,WACG,GAAsB,cAAlBA,SAASC,KAAsB,CAC/B,MAAMhD,MAAQ,IAAIiD,YAAY,iCAAkC,CAC5DzC,SAAYA,WAEOmC,SAASC,cAAcvF,UAAUe,WAAWC,OAC7D,sEAEFsE,SAASO,cAAclD,MAE/B,IAGZ,IAIKmD,QAAQ3C,SADF,CAAC4C,WAAW,EAAMC,SAAS,KAEnC,CAAI,IAEdhB,MAAMnF,aAAaoF,YAmBxBgB,QAAU,SAASrF,MACnBA,KAAOpB,EAAEoB,MACTR,YAAc,GACdC,SAAW,EACX0C,uBAAuBnC,MACvBH,WAAaG,KAAKM,KAAK,oBACZmC,SAASzC,KAAKM,KAAK,mBAC9BR,WAAa2C,SAASzC,KAAKM,KAAK,qBAC3BN,KAAKM,KAAK,gBAnBU,SAASN,MAClChB,aAAaL,OAAOqB,KAAM,CACtBhB,aAAasG,OAAOC,WAkBpBC,CAAuBxF,MACvBA,KAAKM,KAAK,aAAa,KAqC/B,MAAO,CACHmF,KAnCO,SAASzF,MAGhBpB,EAAE8F,UAAUgB,GAAG,gEACX,SAASC,EAAGC,UACRhG,eAAiBgG,SACjB/D,KAAKwD,QAAQrF,KACjB,EAAEkC,KAAKL,QA6BXgE,MAfQ,SAAS7F,MACbR,YAAYgC,OAAS,EACrBhC,YAAY8D,SAAQ,SAASwC,WAAYC,OACrC,IAAIC,iBArPe,SAAShG,KAAM+F,OAC1C,OAAO/F,KAAKE,KAAK,iDAAmD6F,MAAQ,MAoP7CE,CAAyBjG,KAAM+F,OACtDhF,eAAef,KAAM8F,YAAY3B,MAAK,SAASG,KAAMC,IACjD,OAAOrF,UAAUsF,oBAAoBwB,iBAAkB1B,KAAMC,GAChE,IAAEH,MAAMnF,aAAaoF,UAC1B,IAEAgB,QAAQrF,OAOZqF,QAASA,QAEjB"}