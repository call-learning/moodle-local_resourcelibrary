{"version":3,"file":"view.min.js","sources":["../src/view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manage the courses or course modules view for the Resource Library.\n *\n * Inspired from the Course overview block.\n * @copyright  2020 CALL Learning 2020 - Laurent David laurent@call-learning.fr\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(\n    [\n        'jquery',\n        'local_resourcelibrary/repository',\n        'core/paged_content_factory',\n        'core/pubsub',\n        'core/custom_interaction_events',\n        'core/notification',\n        'core/templates',\n        'core_course/events',\n        'local_resourcelibrary/selectors',\n        'core/paged_content_events',\n    ],\n    function(\n        $,\n        Repository,\n        PagedContentFactory,\n        PubSub,\n        CustomEvents,\n        Notification,\n        Templates,\n        CourseEvents,\n        Selectors,\n        PagedContentEvents\n    ) {\n\n        var TEMPLATES = {\n            ENTITES_CARDS: 'local_resourcelibrary/view-cards',\n            ENTITIES_LIST: 'local_resourcelibrary/view-list',\n            NOENTITIES: 'local_resourcelibrary/no-entities'\n        };\n\n        var NUMCOURSES_PERPAGE = [12, 24, 48];\n\n        var loadedPages = [];\n\n        var lastPage = 0;\n\n        var lastLimit = 0;\n\n        var namespace = null;\n\n        var currentFilters = [];\n\n        var entityType = 'course';\n\n        var courseId = 0;\n\n        var categoryId = 0;\n\n        /**\n         * Get display modifier values from DOM.\n         * This will either change the sorting order, the way we display the cards or list\n         * and if we display categories or sections\n         * @param {object} root The root element for the entities view.\n         * @return {object} display modifier Set.\n         */\n        var getDisplayModifierValues = function(root) {\n            var entityRegion = root.find(Selectors.entityView.region);\n            return {\n                display: entityRegion.attr('data-display'),\n                sort: {column: entityRegion.attr('data-sort-column'), order: entityRegion.attr('data-sort-order')},\n                displaycategories: entityRegion.attr('data-displaycategories'),\n            };\n        };\n\n        // We want the paged content controls below the paged content area.\n        // and the controls should be ignored while data is loading.\n        var DEFAULT_PAGED_CONTENT_CONFIG = {\n            ignoreControlWhileLoading: true,\n            controlPlacementBottom: true,\n            persistentLimitKey: 'local_resourcelibrary_user_paging_preference'\n        };\n\n        /**\n         * Get enrolled entities from backend.\n         * @param {object} modifiers The display modifier for this view.\n         * @param {object} filters The filters for this view.\n         * @param {int} limit The number of entities to show.\n         * @param {int} offset to start with The number of entities to show.\n         * @return {promise} Resolved with an array of entities.\n         */\n        var getEntities = function(modifiers, filters, limit, offset) {\n            if (entityType === 'course') {\n                return Repository.getFilteredCourseList({\n                    categoryid: categoryId,\n                    sorting: [{column: modifiers.sort.column, order: modifiers.sort.order}],\n                    filters: filters,\n                    limit: limit,\n                    offset: offset\n                });\n            }\n            return Promise.resolve([]);\n        };\n\n        /**\n         * Get the paged content container element.\n         *\n         * @param  {Object} root The entity overview container\n         * @param  {Number} index Rendered page index.\n         * @return {Object} The rendered paged container.\n         */\n        var getPagedContentContainer = function(root, index) {\n            return root.find('[data-region=\"paged-content-page\"][data-page=\"' + index + '\"]');\n        };\n\n        /**\n         * Render the dashboard entities.\n         *\n         * @param {object} root The root element for the entities view.\n         * @param {array} pageData containing the page data as setup in LoadPage\n         * @return {promise} jQuery promise resolved after rendering is complete.\n         */\n        var renderEntities = function(root, pageData) {\n\n            var entities = [];\n            if (pageData.entities !== undefined) {\n                entities = pageData.entities;\n            }\n            var filters = getDisplayModifierValues(root);\n\n            var currentTemplate = '';\n            if (filters.display === 'list') {\n                currentTemplate = TEMPLATES.ENTITIES_LIST;\n            } else {\n                currentTemplate = TEMPLATES.ENTITES_CARDS;\n            }\n\n            // Delete the entity category if it is not to be displayed.\n            if (filters.displaycategories !== 'on') {\n                entities = entities.map(function(entity) {\n                    delete entity.category;\n                    return entity;\n                });\n            }\n\n            if (entities.length) {\n                return Templates.render(currentTemplate, {\n                    entities: entities,\n                });\n            } else {\n                var noentitiesimg = root.find(Selectors.entityView.region).attr('data-noentitiesimg');\n                return Templates.render(TEMPLATES.NOENTITIES, {\n                    noentitiesimg: noentitiesimg\n                });\n            }\n        };\n\n        /**\n         * Return the callback to be passed to the subscribe event\n         *\n         * @param {Number} limit The paged limit that is passed through the event\n         */\n        var setLimit = function(limit) {\n            this.find(Selectors.entityView.region).attr('data-paging', limit);\n        };\n\n        /**\n         * Intialise the paged list and cards views on page load.\n         * Returns an array of paged contents that we would like to handle here\n         *\n         * @param {object} root The root element for the entities view\n         * @param {string} namespace The namespace for all the events attached\n         */\n        var registerPagedEventHandlers = function(root, namespace) {\n            var event = namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT;\n            PubSub.subscribe(event, setLimit.bind(root));\n        };\n\n        /**\n         * Get the maximum item per page\n         * @param {DomNode} rootNode\n         * @returns {array} of items per page\n         */\n        var getItemPerPage = function(rootNode) {\n            var itemsPerPage = NUMCOURSES_PERPAGE;\n            var pagingLimit = parseInt(rootNode.find(Selectors.entityView.region).attr('data-paging'), 10);\n            if (pagingLimit) {\n                itemsPerPage = NUMCOURSES_PERPAGE.map(function(value) {\n                    var active = false;\n                    if (value === pagingLimit) {\n                        active = true;\n                    }\n\n                    return {\n                        value: value,\n                        active: active\n                    };\n                });\n            }\n            return itemsPerPage;\n        };\n\n        /**\n         * Intialise the entities list and cards views on page load.\n         *\n         * @param {object} root The root element for the entities view.\n         */\n        var initializePagedContent = function(root) {\n            namespace = \"local_resourcelibrary\" + root.attr('id') + \"_\" + Math.random();\n\n            var itemsPerPage = getItemPerPage(root);\n\n\n            var modifiers = getDisplayModifierValues(root);\n            var config = $.extend({}, DEFAULT_PAGED_CONTENT_CONFIG);\n            config.eventNamespace = namespace;\n\n            var pagedContentPromise = PagedContentFactory.createWithLimit(\n                itemsPerPage,\n                function(pagesData, actions) {\n                    var promises = [];\n\n                    pagesData.forEach(function(pageData) {\n                        var currentPage = pageData.pageNumber;\n                        var limit = pageData.limit;\n\n                        // Reset local variables if limits have changed.\n                        if (lastLimit !== limit) {\n                            loadedPages = [];\n                            lastPage = 0;\n                        }\n\n                        if (lastPage === currentPage) {\n                            // If we are on the last page and have it's data then load it from cache.\n                            actions.allItemsLoaded(lastPage);\n                            promises.push(renderEntities(root, loadedPages[currentPage]));\n                            return;\n                        }\n                        lastLimit = limit;\n                        var additionalValues = {};\n                        if (entityType !== 'course') {\n                            additionalValues = courseId;\n                        }\n                        var pagePromise = getEntities(\n                            modifiers,\n                            currentFilters,\n                            limit,\n                            limit * (currentPage - 1),\n                            additionalValues\n                        ).then(function(entities) {\n                            // Finished setting up the current page.\n                            loadedPages[currentPage] = {\n                                entities: entities\n                            };\n                            // Set the last page to either the current or next page.\n                            if (loadedPages[currentPage].entities.length < pageData.limit) {\n                                lastPage = currentPage;\n                                actions.allItemsLoaded(currentPage);\n                            }\n                            return renderEntities(root, loadedPages[currentPage]);\n                        }).catch(Notification.exception);\n\n                        promises.push(pagePromise);\n                    });\n\n                    return promises;\n                },\n                config\n            );\n\n            pagedContentPromise.then(function(html, js) {\n                registerPagedEventHandlers(root, namespace);\n                return Templates.replaceNodeContents(root.find(Selectors.entityView.region), html, js);\n            }).done(\n                () => {\n                    const rootNode = document.querySelector(Selectors.entityView.region\n                        + ' .paged-content-page-container');\n                    const waitForNodeReplacement = (mutationsList) => {\n                        if (mutationsList) {\n                            mutationsList.forEach(\n                                (mutation) => {\n                                    if (mutation.type === 'childList') {\n                                        const event = new CustomEvent('resource_library_card_rendered', {\n                                            'rootNode': rootNode\n                                        });\n                                        const haspagecontent = document.querySelector(Selectors.entityView.region\n                                            + ' .paged-content-page-container [data-region=\"paged-content-page\"]');\n                                        if (haspagecontent) {\n                                            document.dispatchEvent(event);\n                                        }\n                                    }\n                                }\n                            );\n                        }\n                    };\n                    const observer = new MutationObserver(waitForNodeReplacement);\n                    const config = {childList: true, subtree: true};\n                    observer.observe(rootNode, config);\n                    return true;\n                })\n                .catch(Notification.exception);\n        };\n\n        /**\n         * Listen to, and handle events for the Resource Library page.\n         *\n         * @param {Object} root resourcelibrary page\n         */\n        var registerEventListeners = function(root) {\n            CustomEvents.define(root, [\n                CustomEvents.events.activate\n            ]);\n        };\n\n        /**\n         * Intialise the entities list and cards views on page load.\n         *\n         * @param {object} root The root element for the entities view.\n         */\n        var refresh = function(root) {\n            root = $(root);\n            loadedPages = [];\n            lastPage = 0;\n            initializePagedContent(root);\n            entityType = root.attr('data-entity-type');\n            courseId = parseInt(root.attr('data-parent-id'));\n            categoryId = parseInt(root.attr('data-category-id'));\n            if (!root.attr('data-init')) {\n                registerEventListeners(root);\n                root.attr('data-init', true);\n            }\n        };\n        var init = function(root) {\n            // Only init the view when filters are initialised.\n            // Reset the views when we receive a change in filters.\n            $(document).on('resourcelibrary-filters-inited resourcelibrary-filters-change',\n                function(e, formdata) {\n                    currentFilters = formdata;\n                    this.refresh(root);\n                }.bind(this)\n            );\n        };\n\n\n        /**\n         * Reset the entities views to their original\n         * state on first page load.entityOffset\n         *\n         * This is called when configuration has changed for the event lists\n         * to cause them to reload their data.\n         *\n         * @param {Object} root The root element for the timeline view.\n         */\n        var reset = function(root) {\n            if (loadedPages.length > 0) {\n                loadedPages.forEach(function(entityList, index) {\n                    var pagedContentPage = getPagedContentContainer(root, index);\n                    renderEntities(root, entityList).then(function(html, js) {\n                        return Templates.replaceNodeContents(pagedContentPage, html, js);\n                    }).catch(Notification.exception);\n                });\n            } else {\n                refresh(root);\n            }\n        };\n\n        return {\n            init: init,\n            reset: reset,\n            refresh: refresh,\n        };\n    });\n"],"names":["define","$","Repository","PagedContentFactory","PubSub","CustomEvents","Notification","Templates","CourseEvents","Selectors","PagedContentEvents","TEMPLATES","NUMCOURSES_PERPAGE","loadedPages","lastPage","lastLimit","namespace","currentFilters","entityType","categoryId","getDisplayModifierValues","root","entityRegion","find","entityView","region","display","attr","sort","column","order","displaycategories","DEFAULT_PAGED_CONTENT_CONFIG","ignoreControlWhileLoading","controlPlacementBottom","persistentLimitKey","renderEntities","pageData","entities","undefined","filters","currentTemplate","map","entity","category","length","render","noentitiesimg","setLimit","limit","registerPagedEventHandlers","event","SET_ITEMS_PER_PAGE_LIMIT","subscribe","bind","initializePagedContent","Math","random","itemsPerPage","rootNode","pagingLimit","parseInt","value","active","getItemPerPage","modifiers","config","extend","eventNamespace","pagedContentPromise","createWithLimit","pagesData","actions","promises","forEach","currentPage","pageNumber","allItemsLoaded","push","pagePromise","offset","getFilteredCourseList","categoryid","sorting","Promise","resolve","getEntities","then","catch","exception","html","js","replaceNodeContents","done","document","querySelector","MutationObserver","mutationsList","mutation","type","CustomEvent","dispatchEvent","observe","childList","subtree","refresh","events","activate","registerEventListeners","init","on","e","formdata","this","reset","entityList","index","pagedContentPage","getPagedContentContainer"],"mappings":"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"}